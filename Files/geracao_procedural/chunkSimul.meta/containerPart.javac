package JAVARuntime;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:TerreController
class TerreController extends Component { //[I-S]LN=0;[I-E]
  private SpatialObject armLog, Obj, voi; //[I-S]LN=1;[I-E]
  private ModelRenderer TerrModelo; //[I-S]LN=2;[I-E]
  private Vertex TerrVertex; //[I-S]LN=3;[I-E]
  private Vector3Buffer TerrVertices = null, TerrNormal = null; //[I-S]LN=4;[I-E]
  private IntBuffer TerrTriangles = null; //[I-S]LN=5;[I-E]
  private Vector2Buffer TerrUVs = null; //[I-S]LN=6;[I-E]
  private List<Vector2> TerrUV = new LinkedList<Vector2>(); //[I-S]LN=7;[I-E]
  private PerlinNoise perlin = new PerlinNoise(100); //[I-S]LN=8;[I-E]
  private chunkgen tama; //[I-S]LN=9;[I-E]
  private Vector3 mypos; //[I-S]LN=10;[I-E]
  private HashMap<Long, Float> HeightMap = new HashMap<Long, Float>(); //[I-S]LN=11;[I-E]
  private int[][] block = null; //[I-S]LN=12;[I-E]
  private float[][] heigth = null; //[I-S]LN=13;[I-E]
  private malha modela = new malha(); //[I-S]LN=14;[I-E]
 //[I-S]LN=15;[I-E]
public   void start() { //[I-S]LN=16;[I-E]
    if (!myObject.exists()) return; //[I-S]LN=17;[I-E]
    tama = WorldController.findObject("player").findComponent("chunkgen"); //[I-S]LN=18;[I-E]
    armLog = WorldController.findObject("log"); //[I-S]LN=19;[I-E]
    TerrModelo = myObject.findComponent("modelrenderer"); //[I-S]LN=20;[I-E]
 //[I-S]LN=21;[I-E]
    reload(); //[I-S]LN=22;[I-E]
  } //[I-S]LN=23;[I-E]
 //[I-S]LN=24;[I-E]
  private void myposblock() { //[I-S]LN=25;[I-E]
mypos = myObject.getPosition(); //[I-S]LN=26;[I-E]
  } //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
  public void reload() { //[I-S]LN=29;[I-E]
    new AsyncTask( //[I-S]LN=30;[I-E]
        new AsyncRunnable() { //[I-S]LN=31;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=32;[I-E]
            TerrVertex = new Vertex(); //[I-S]LN=33;[I-E]
            myposblock(); //[I-S]LN=34;[I-E]
            MatrizChunck(); //[I-S]LN=35;[I-E]
            createBuffer(); //[I-S]LN=36;[I-E]
 //[I-S]LN=37;[I-E]
            HeightMap.clear(); //[I-S]LN=38;[I-E]
            TerrUV.clear(); //[I-S]LN=39;[I-E]
            return null; //[I-S]LN=40;[I-E]
          } //[I-S]LN=41;[I-E]
 //[I-S]LN=42;[I-E]
          public void onEngine(Object result) { //[I-S]LN=43;[I-E]
            WaterCriate(); //[I-S]LN=44;[I-E]
            generat(); //[I-S]LN=45;[I-E]
            if (Obj != null && Obj.exists()) { //[I-S]LN=46;[I-E]
              Water gera = Obj.findComponent("Water"); //[I-S]LN=47;[I-E]
              if (gera != null) { //[I-S]LN=48;[I-E]
                gera.WaterGera(); //[I-S]LN=49;[I-E]
                //gera.createBuffer(); //[I-S]LN=50;[I-E]
              }  //[I-S]LN=51;[I-E]
            } //[I-S]LN=52;[I-E]
          } //[I-S]LN=53;[I-E]
        }); //[I-S]LN=54;[I-E]
  } //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
  private void MatrizChunck() { //[I-S]LN=57;[I-E]
    int W = tama.width; //[I-S]LN=58;[I-E]
    block = new int[W + 1][W + 1]; //[I-S]LN=59;[I-E]
    heigth = new float[W + 1][W + 1]; //[I-S]LN=60;[I-E]
    for (int z = 0; z <= W; z++) { //[I-S]LN=61;[I-E]
      for (int x = 0; x <= W; x++) { //[I-S]LN=62;[I-E]
        float yLocal = modela.perlinnoises(tama, myObject, x, z); //[I-S]LN=63;[I-E]
float yWorld = yLocal + mypos.getY(); //[I-S]LN=64;[I-E]
        heigth[z][x] = yLocal; //[I-S]LN=65;[I-E]
        if (yWorld >= tama.waterlevel - 2 && yWorld <= 2 + tama.waterlevel) block[z][x] = 0; //[I-S]LN=66;[I-E]
        else if (yWorld >= tama.waterlevel - 8 && yWorld <= tama.waterlevel - 2) block[z][x] = 12; //[I-S]LN=67;[I-E]
        else if (yWorld <= tama.waterlevel - 8) block[z][x] = 10; //[I-S]LN=68;[I-E]
        else block[z][x] = 1; //[I-S]LN=69;[I-E]
      } //[I-S]LN=70;[I-E]
    } //[I-S]LN=71;[I-E]
  } //[I-S]LN=72;[I-E]
 //[I-S]LN=73;[I-E]
  private void createBuffer() { //[I-S]LN=74;[I-E]
    chunkSimul data = new chunkSimul(); //[I-S]LN=75;[I-E]
    data.generat(tama.width, block, heigth, modela); //[I-S]LN=76;[I-E]
    TerrVertices = BufferUtils.createVector3Buffer(data.VertecesCount); //[I-S]LN=77;[I-E]
    TerrNormal = BufferUtils.createVector3Buffer(data.NormalCount); //[I-S]LN=78;[I-E]
    TerrTriangles = BufferUtils.createIntBuffer(data.TrianCount); //[I-S]LN=79;[I-E]
    TerrUVs = BufferUtils.createVector2Buffer(data.UvMapCount); //[I-S]LN=80;[I-E]
    TerrVertices.setVboEnabled(true); //[I-S]LN=81;[I-E]
    TerrNormal.setVboEnabled(true); //[I-S]LN=82;[I-E]
    TerrUVs.setVboEnabled(true); //[I-S]LN=83;[I-E]
  } //[I-S]LN=84;[I-E]
 //[I-S]LN=85;[I-E]
  private void generat() { //[I-S]LN=86;[I-E]
    int W = tama.width; //[I-S]LN=87;[I-E]
    for (int z = 0; z <= W; z++) { //[I-S]LN=88;[I-E]
      for (int x = 0; x <= W; x++) { //[I-S]LN=89;[I-E]
        int matriz = block[z][x]; //[I-S]LN=90;[I-E]
        float y = heigth[z][x]; //[I-S]LN=91;[I-E]
long codekey = CodificKey((int) (x + mypos.getX()), (int) (z + mypos.getZ())); //[I-S]LN=92;[I-E]
HeightMap.put(codekey, y + mypos.getY()); //[I-S]LN=93;[I-E]
 //[I-S]LN=94;[I-E]
        topFace(x, y, z, matriz); //[I-S]LN=95;[I-E]
        generationlog(x, y, z); //[I-S]LN=96;[I-E]
      } //[I-S]LN=97;[I-E]
    } //[I-S]LN=98;[I-E]
    modela.trianguloN(W, TerrTriangles); //[I-S]LN=99;[I-E]
    int[] TrianConvert = new int[TerrTriangles.position()]; //[I-S]LN=100;[I-E]
    TerrTriangles.rewind(); //[I-S]LN=101;[I-E]
    TerrTriangles.get(TrianConvert); //[I-S]LN=102;[I-E]
    TerrVertex = modela.meshupN(false, TerrModelo, tama.TerrMate, TrianConvert, TerrVertices, TerrNormal, TerrUVs); //[I-S]LN=103;[I-E]
  } //[I-S]LN=104;[I-E]
 //[I-S]LN=105;[I-E]
  private void topFace(int x, float y, int z, int typeblock) { //[I-S]LN=106;[I-E]
    if (typeblock < 0) return; //[I-S]LN=107;[I-E]
    TerrVertices.put(x, y, z); //[I-S]LN=108;[I-E]
    TerrNormal.put(0, 1, 0); //[I-S]LN=109;[I-E]
    TerrUVs.put(mapuv(typeblock, 0, 0)); //[I-S]LN=110;[I-E]
  } //[I-S]LN=111;[I-E]
 //[I-S]LN=112;[I-E]
  private Vector2 mapuv(int type, int x, int y) { //[I-S]LN=113;[I-E]
    int t = 4; //[I-S]LN=114;[I-E]
    float tilasize = 1f / t; //[I-S]LN=115;[I-E]
    int tx = type % t; //[I-S]LN=116;[I-E]
    int ty = type / t; //[I-S]LN=117;[I-E]
    float u = tx * tilasize + x * tilasize, v = ty * tilasize + y * tilasize; //[I-S]LN=118;[I-E]
    return new Vector2(u, v); //[I-S]LN=119;[I-E]
  } //[I-S]LN=120;[I-E]
 //[I-S]LN=121;[I-E]
  public void WaterCriate() { //[I-S]LN=122;[I-E]
    Obj = new SpatialObject("Water"); //[I-S]LN=123;[I-E]
    Obj.setParent(myObject); //[I-S]LN=124;[I-E]
    Obj.setStatic(true); //[I-S]LN=125;[I-E]
    Obj.addComponent(new ModelRenderer()); //[I-S]LN=126;[I-E]
    Obj.addComponent(new Water()); //[I-S]LN=127;[I-E]
  } //[I-S]LN=128;[I-E]
 //[I-S]LN=129;[I-E]
  private void generationlog(float x, float y, float z) { //[I-S]LN=130;[I-E]
float worldx = x + mypos.getX(); //[I-S]LN=131;[I-E]
float worldz = z + mypos.getZ(); //[I-S]LN=132;[I-E]
int chunkX = (int) myObject.getGlobalPosition().getX(); //[I-S]LN=133;[I-E]
int chunkZ = (int) myObject.getGlobalPosition().getZ(); //[I-S]LN=134;[I-E]
    if (worldx < chunkX || worldx >= chunkX + tama.width || worldx < chunkZ || worldz >= chunkZ + tama.width) return; //[I-S]LN=135;[I-E]
    int space = Random.range(3, 5); //[I-S]LN=136;[I-E]
    if (((int) worldx % space != 0) || ((int) worldz % space != 0)) return; //[I-S]LN=137;[I-E]
    float addspaw = perlin.noise(worldx + tama.seed, worldz + tama.seed); //[I-S]LN=138;[I-E]
    addspaw -= perlin.noise(worldx * 50f + tama.seed, worldz * 50f + tama.seed); //[I-S]LN=139;[I-E]
    if (addspaw >= tama.valuelog && y > tama.waterlevel + tama.heightscale) { //[I-S]LN=140;[I-E]
      int quemspaw = Random.range(0, tama.trees.size() - 1); //[I-S]LN=141;[I-E]
Vector3 positobj = new Vector3(worldx, y + mypos.getY(), worldz).sub(myObject.getGlobalPosition()); //[I-S]LN=142;[I-E]
      SpatialObject log = myObject.instantiate(tama.trees.get(quemspaw), positobj); //[I-S]LN=143;[I-E]
      log.setParent(myObject); //[I-S]LN=144;[I-E]
    } //[I-S]LN=145;[I-E]
  } //[I-S]LN=146;[I-E]
 //[I-S]LN=147;[I-E]
  public float getHeight(float x, float z) { //[I-S]LN=148;[I-E]
    long codeKey = CodificKey((int) Math.floor(x), (int) Math.floor(z)); //[I-S]LN=149;[I-E]
    return HeightMap.getOrDefault(codeKey, 0f); //[I-S]LN=150;[I-E]
  } //[I-S]LN=151;[I-E]
 //[I-S]LN=152;[I-E]
  public long CodificKey(int x, int z) { //[I-S]LN=153;[I-E]
    return (((long) x) << 32) | (z & 0xFFFFFFFFL); //[I-S]LN=154;[I-E]
  } //[I-S]LN=155;[I-E]
} //[I-S]LN=156;[I-E]
//C-R:Water
class Water extends Component { //[I-S]LN=0;[I-E]
  private ModelRenderer WaterModelo; //[I-S]LN=1;[I-E]
  private Vertex WaterVertex; //[I-S]LN=2;[I-E]
  private Vector2Buffer WaterUV = null; //[I-S]LN=3;[I-E]
  private Vector3Buffer WaterVertices = null, WaterNormal = null; //[I-S]LN=4;[I-E]
  private IntBuffer WaterTriangle = null; //[I-S]LN=5;[I-E]
  private chunkgen tama; //[I-S]LN=6;[I-E]
  private malha modela = new malha(); //[I-S]LN=7;[I-E]
 //[I-S]LN=8;[I-E]
public   void start() { //[I-S]LN=9;[I-E]
    if (!myObject.exists()) return; //[I-S]LN=10;[I-E]
    tama = WorldController.findObject("player").findComponent("chunkgen"); //[I-S]LN=11;[I-E]
    WaterModelo = myObject.findComponent("modelrenderer"); //[I-S]LN=12;[I-E]
    WaterVertex = new Vertex(); //[I-S]LN=13;[I-E]
   // if (myObject.exists()) return; //[I-S]LN=14;[I-E]
    // WaterVertices.clear(); //[I-S]LN=15;[I-E]
    // WaterNormal.clear(); //[I-S]LN=16;[I-E]
    //WaterUV.clear(); //[I-S]LN=17;[I-E]
  } //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
  public void WaterGera() { //[I-S]LN=20;[I-E]
    start(); //[I-S]LN=21;[I-E]
    createBuffer(); //[I-S]LN=22;[I-E]
    for (int z = 0; z <= 4; z++) { //[I-S]LN=23;[I-E]
      for (int x = 0; x <= 4; x++) { //[I-S]LN=24;[I-E]
        WaterVertices.put(x * 4, tama.waterlevel, z * 4); //[I-S]LN=25;[I-E]
        WaterNormal.put(0, 1, 0); //[I-S]LN=26;[I-E]
        WaterUV.put(new Vector2(x, z)); //[I-S]LN=27;[I-E]
      } //[I-S]LN=28;[I-E]
    } //[I-S]LN=29;[I-E]
    modela.trianguloN(4, WaterTriangle); //[I-S]LN=30;[I-E]
    int[] WaterTriangleConvert = new int[WaterTriangle.position()]; //[I-S]LN=31;[I-E]
    WaterTriangle.rewind(); //[I-S]LN=32;[I-E]
    WaterTriangle.get(WaterTriangleConvert); //[I-S]LN=33;[I-E]
    WaterVertex = modela.meshupN(false, WaterModelo, tama.WaterMate, WaterTriangleConvert, WaterVertices, WaterNormal, WaterUV); //[I-S]LN=34;[I-E]
    myObject.removeComponent(new Water()); //[I-S]LN=35;[I-E]
  } //[I-S]LN=36;[I-E]
 //[I-S]LN=37;[I-E]
  public void createBuffer() { //[I-S]LN=38;[I-E]
    chunkSimul data = new chunkSimul(); //[I-S]LN=39;[I-E]
    data.generatWater(4, modela); //[I-S]LN=40;[I-E]
    WaterVertices = BufferUtils.createVector3Buffer(data.VertecesWaterCount); //[I-S]LN=41;[I-E]
    WaterNormal = BufferUtils.createVector3Buffer(data.NormalWaterCount); //[I-S]LN=42;[I-E]
    WaterTriangle = BufferUtils.createIntBuffer(data.TrianWaterCount); //[I-S]LN=43;[I-E]
    WaterVertices.setVboEnabled(true); //[I-S]LN=44;[I-E]
    WaterNormal.setVboEnabled(true); //[I-S]LN=45;[I-E]
  }  //[I-S]LN=46;[I-E]
} //[I-S]LN=47;[I-E]
//C-R:malha
class malha { //[I-S]LN=0;[I-E]
  private PerlinNoise perlin = new PerlinNoise(100); //[I-S]LN=1;[I-E]
 //[I-S]LN=2;[I-E]
  public void ChunckSimul(chunkSimul data) { //[I-S]LN=3;[I-E]
    data.VertecesCount += 1; //[I-S]LN=4;[I-E]
    data.NormalCount += 1; //[I-S]LN=5;[I-E]
    data.TrianCount += 6; //[I-S]LN=6;[I-E]
    data.UvMapCount += 1; //[I-S]LN=7;[I-E]
  } //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
  public void WaterSimul(chunkSimul data) { //[I-S]LN=10;[I-E]
    data.VertecesWaterCount += 1; //[I-S]LN=11;[I-E]
    data.NormalWaterCount += 1; //[I-S]LN=12;[I-E]
    data.TrianWaterCount += 6; //[I-S]LN=13;[I-E]
    data.UvMapWaterCount += 1; //[I-S]LN=14;[I-E]
  }  //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
  public void trianguloN(int value, IntBuffer triang) { //[I-S]LN=17;[I-E]
    int verts = 0; //[I-S]LN=18;[I-E]
    for (int z = 0; z < value; z++) { //[I-S]LN=19;[I-E]
      for (int x = 0; x < value; x++) { //[I-S]LN=20;[I-E]
        triang.put(verts + 0); //[I-S]LN=21;[I-E]
        triang.put(verts + value + 1); //[I-S]LN=22;[I-E]
        triang.put(verts + 1); //[I-S]LN=23;[I-E]
        triang.put(verts + 1); //[I-S]LN=24;[I-E]
        triang.put(verts + value + 1); //[I-S]LN=25;[I-E]
        triang.put(verts + value + 2); //[I-S]LN=26;[I-E]
        verts++; //[I-S]LN=27;[I-E]
      } //[I-S]LN=28;[I-E]
      verts++; //[I-S]LN=29;[I-E]
    } //[I-S]LN=30;[I-E]
  } //[I-S]LN=31;[I-E]
 //[I-S]LN=32;[I-E]
  public Vertex meshupN(boolean onoff, ModelRenderer model, MaterialFile mateFile, int[] trianglo, Vector3Buffer vertices, Vector3Buffer normal, Vector2Buffer uv) { //[I-S]LN=33;[I-E]
    Vertex vertexs = new Vertex(); //[I-S]LN=34;[I-E]
    vertexs.setVertices(vertices); //[I-S]LN=35;[I-E]
    vertexs.setNormals(normal); //[I-S]LN=36;[I-E]
    vertexs.setUVs(uv); //[I-S]LN=37;[I-E]
    vertexs.setTriangles(trianglo); //[I-S]LN=38;[I-E]
    vertexs.apply(); //[I-S]LN=39;[I-E]
 //[I-S]LN=40;[I-E]
    model.setMaterialFile(mateFile); //[I-S]LN=41;[I-E]
    model.setVertex(vertexs); //[I-S]LN=42;[I-E]
if (onoff) model.getMaterial().setReceiveLight(false); //[I-S]LN=43;[I-E]
    model.setCastShadowEnabled(false); //[I-S]LN=44;[I-E]
    return vertexs; //[I-S]LN=45;[I-E]
  } //[I-S]LN=46;[I-E]
 //[I-S]LN=47;[I-E]
  public float perlinnoises(chunkgen tama, SpatialObject myObj, float x, float z) { //[I-S]LN=48;[I-E]
    float calcu = 0; //[I-S]LN=49;[I-E]
    float pi = 22f / 7f; //[I-S]LN=50;[I-E]
float valuex = (x + tama.seed) + myObj.getPosition().getX(); //[I-S]LN=51;[I-E]
float valuez = (z + tama.seed) + myObj.getPosition().getZ(); //[I-S]LN=52;[I-E]
    calcu += perlin.noise(valuex, valuez) * tama.heightscale; //[I-S]LN=53;[I-E]
    calcu += perlin.noise(valuex * pi, valuez * pi) * tama.heightscale * 0.5f; //[I-S]LN=54;[I-E]
    calcu += perlin.noise(valuex / pi, valuez / pi) * tama.heightscale / 0.5f; //[I-S]LN=55;[I-E]
    calcu += perlin.noise(valuex - pi, valuez - pi) * tama.heightscale - 0.1f; //[I-S]LN=56;[I-E]
    return calcu; //[I-S]LN=57;[I-E]
  } //[I-S]LN=58;[I-E]
} //[I-S]LN=59;[I-E]
//C-R:chunkSimul
class chunkSimul { //[I-S]LN=0;[I-E]
  public int VertecesCount, NormalCount, TrianCount,UvMapCount; //[I-S]LN=1;[I-E]
  public int VertecesWaterCount, NormalWaterCount, TrianWaterCount,UvMapWaterCount; //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
  public void generat(int value, int[][] block, float[][] heigth, malha data) { //[I-S]LN=4;[I-E]
    for (int z = 0; z <= value; z++) { //[I-S]LN=5;[I-E]
      for (int x = 0; x <= value; x++) { //[I-S]LN=6;[I-E]
        float y = heigth[z][x]; //[I-S]LN=7;[I-E]
        int matriz = block[z][x]; //[I-S]LN=8;[I-E]
        data.ChunckSimul(this); //[I-S]LN=9;[I-E]
      }  //[I-S]LN=10;[I-E]
    } //[I-S]LN=11;[I-E]
  } //[I-S]LN=12;[I-E]
  public void generatWater(int value, malha data) { //[I-S]LN=13;[I-E]
    for (int z = 0; z <= value; z++) { //[I-S]LN=14;[I-E]
      for (int x = 0; x <= value; x++) { //[I-S]LN=15;[I-E]
        data.WaterSimul(this); //[I-S]LN=16;[I-E]
      }  //[I-S]LN=17;[I-E]
    } //[I-S]LN=18;[I-E]
  } //[I-S]LN=19;[I-E]
} //[I-S]LN=20;[I-E]