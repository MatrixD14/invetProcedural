class shade_test extends Component {
   
    //[I-S]LN=1;[I-E]
   // Useful imports //[I-S]LN=2;[I-E]
   import java.util.*; //[I-S]LN=3;[I-E]
    //[I-S]LN=4;[I-E]
   /** @Author */ //[I-S]LN=5;[I-E]
   public class test extends MaterialShader { //[I-S]LN=6;[I-E]
     @Override //[I-S]LN=7;[I-E]
     public String getShaderName() { //[I-S]LN=8;[I-E]
       return "CustomShaders/test"; //[I-S]LN=9;[I-E]
     } //[I-S]LN=10;[I-E]
    //[I-S]LN=11;[I-E]
     @Override //[I-S]LN=12;[I-E]
     public float getMinimalSupportedOGL() { //[I-S]LN=13;[I-E]
       return MaterialShader.OGL3; //[I-S]LN=14;[I-E]
     } //[I-S]LN=15;[I-E]
    //[I-S]LN=16;[I-E]
     @Order(idx = -1) //[I-S]LN=17;[I-E]
     public Texture t; //[I-S]LN=18;[I-E]
    //[I-S]LN=19;[I-E]
     @Order(idx = 0) //[I-S]LN=20;[I-E]
     public Color cor = new Color(255, 255, 255); //[I-S]LN=21;[I-E]
    //[I-S]LN=22;[I-E]
     private Shader shade; //[I-S]LN=23;[I-E]
     @Order(idx = 1) //[I-S]LN=24;[I-E]
     public Vector2 mapUV = new Vector2(1, 1), tile = new Vector2(0, 0); //[I-S]LN=25;[I-E]
    //[I-S]LN=26;[I-E]
     @Override //[I-S]LN=27;[I-E]
     void start() { //[I-S]LN=28;[I-E]
       Shader.Builder b = new Shader.Builder(); //[I-S]LN=29;[I-E]
       b.createProgram(); //[I-S]LN=30;[I-E]
       VertexShader vert = VertexShader.loadFile(this, "test"); //[I-S]LN=31;[I-E]
       b.setVertexCode(vert); //[I-S]LN=32;[I-E]
       FragmentShader fra = FragmentShader.loadFile(this, "test"); //[I-S]LN=33;[I-E]
       b.setFragmentCode(fra); //[I-S]LN=34;[I-E]
       b.compileVertex(); //[I-S]LN=35;[I-E]
       b.compileFragment(); //[I-S]LN=36;[I-E]
       shade = b.create(); //[I-S]LN=37;[I-E]
     } //[I-S]LN=38;[I-E]
    //[I-S]LN=39;[I-E]
     @Override //[I-S]LN=40;[I-E]
     void render(OGLES ogles, Camera camera, MSRenderData renderData) { //[I-S]LN=41;[I-E]
       OGLES3 ogl = (OGLES3) ogles; //[I-S]LN=42;[I-E]
       ogl.withShader(shade); //[I-S]LN=43;[I-E]
       ogl.setIgnoreAttributeException(true); //[I-S]LN=44;[I-E]
    //[I-S]LN=45;[I-E]
       ogl.uniformMatrix4("viewMatrix", camera.getViewMatrix()); //[I-S]LN=46;[I-E]
       ogl.uniformMatrix4("projectionMatrix", camera.getProjectionMatrix()); //[I-S]LN=47;[I-E]
    //[I-S]LN=48;[I-E]
       ogl.uniformColor("diffuse", cor); //[I-S]LN=49;[I-E]
       ogl.uniformTexture("albedo", t != null ? t : Texture.white()); //[I-S]LN=50;[I-E]
       ogl.uniformVector2("mapuv", mapUV); //[I-S]LN=51;[I-E]
       ogl.uniformVector2("o_tile", tile); //[I-S]LN=52;[I-E]
    //[I-S]LN=53;[I-E]
       for (int i = 0; i < renderData.vertexCount(); i++) { //[I-S]LN=54;[I-E]
         RenderableVertex rvert = renderData.RenderableVertexAt(i); //[I-S]LN=55;[I-E]
         Vertex vertex = rvert.vertex; //[I-S]LN=56;[I-E]
    //[I-S]LN=57;[I-E]
         if (vertex.getVerticesBuffer() != null) ogl.attributeVector3("position", vertex.getVerticesBuffer()); //[I-S]LN=58;[I-E]
         if (vertex.getUVsBuffer() != null) ogl.attributeVector2("texCoord", vertex.getUVsBuffer()); //[I-S]LN=59;[I-E]
    //[I-S]LN=60;[I-E]
         for (int j = 0; j < rvert.objectCount(); j++) { //[I-S]LN=61;[I-E]
           RenderableObject rObj = rvert.objectAt(j); //[I-S]LN=62;[I-E]
           if (!rObj.isVisibleByCamera()) continue; //[I-S]LN=63;[I-E]
           if (rObj.getRenderMatrix() != null) ogl.uniformMatrix4("modelMatrix", rObj.getRenderMatrix()); //[I-S]LN=64;[I-E]
           ogl.drawTriangles(vertex.getTrianglesBuffer()); //[I-S]LN=65;[I-E]
         } //[I-S]LN=66;[I-E]
       }  //[I-S]LN=67;[I-E]
       ogl.releaseAttributes(); //[I-S]LN=68;[I-E]
       ogl.releaseShader(); //[I-S]LN=69;[I-E]
     } //[I-S]LN=70;[I-E]
   } //[I-S]LN=71;[I-E]
}