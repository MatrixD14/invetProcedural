
 //[I-S]LN=1;[I-E]
// Useful imports //[I-S]LN=2;[I-E]
import java.util.*; //[I-S]LN=3;[I-E]
 //[I-S]LN=4;[I-E]
/** @Author */ //[I-S]LN=5;[I-E]
class terreno extends MaterialShader { //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
  /// Define shader configs //[I-S]LN=8;[I-E]
  @Override //[I-S]LN=9;[I-E]
  public String getShaderName() { //[I-S]LN=10;[I-E]
    return "CustomShaders/terreno"; //[I-S]LN=11;[I-E]
  } //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
  @Override //[I-S]LN=14;[I-E]
  public float getMinimalSupportedOGL() { //[I-S]LN=15;[I-E]
    return MaterialShader.OGL3; //[I-S]LN=16;[I-E]
  }  //[I-S]LN=17;[I-E]
 //[I-S]LN=18;[I-E]
  public Color cor = new Color().White(); //[I-S]LN=19;[I-E]
  public Texture img1, noise; //[I-S]LN=20;[I-E]
  private float time = 0; //[I-S]LN=21;[I-E]
  private Shader shader; //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
  @Override //[I-S]LN=24;[I-E]
  void start() { //[I-S]LN=25;[I-E]
    Shader.Builder sh = new Shader.Builder(); //[I-S]LN=26;[I-E]
    sh.createProgram(); //[I-S]LN=27;[I-E]
    VertexShader v = VertexShader.loadFile(this, "water"); //[I-S]LN=28;[I-E]
    sh.setVertexCode(v); //[I-S]LN=29;[I-E]
    FragmentShader f = FragmentShader.loadFile(this, "Grass"); //[I-S]LN=30;[I-E]
    sh.setFragmentCode(f); //[I-S]LN=31;[I-E]
    sh.compileVertex(); //[I-S]LN=32;[I-E]
    sh.compileFragment(); //[I-S]LN=33;[I-E]
 //[I-S]LN=34;[I-E]
    shader = sh.create(); //[I-S]LN=35;[I-E]
  } //[I-S]LN=36;[I-E]
 //[I-S]LN=37;[I-E]
  @Override //[I-S]LN=38;[I-E]
  void render(OGLES ogles, Camera camera, MSRenderData renderData) { //[I-S]LN=39;[I-E]
    OGLES3 ogl = (OGLES3) ogles; //[I-S]LN=40;[I-E]
    ogl.withShader(shader); //[I-S]LN=41;[I-E]
    ogl.setIgnoreAttributeException(true); //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
    ogl.uniformMatrix4("viewMatrix", camera.getViewMatrix()); //[I-S]LN=44;[I-E]
    ogl.uniformMatrix4("projectionMatrix", camera.getProjectionMatrix()); //[I-S]LN=45;[I-E]
    ogl.uniformColor("diffuse", cor); //[I-S]LN=46;[I-E]
    time += 0.01f; //[I-S]LN=47;[I-E]
    ogl.uniformFloat("time",time); //[I-S]LN=48;[I-E]
     //[I-S]LN=49;[I-E]
    ogl.uniformTexture("water", img1 != null ? img1 : img1.White()); //[I-S]LN=50;[I-E]
    ogl.uniformTexture("texnoise", noise != null ? noise : noise.White()); //[I-S]LN=51;[I-E]
 //[I-S]LN=52;[I-E]
    for (int i = 0; i < renderData.vertexCount(); i++) { //[I-S]LN=53;[I-E]
      RenderableVertex rvert = renderData.RenderableVertexAt(i); //[I-S]LN=54;[I-E]
      Vertex vertex = rvert.vertex; //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
      if (vertex.getVerticesBuffer() != null) ogl.attributeVector3("position", vertex.getVerticesBuffer()); //[I-S]LN=57;[I-E]
      if (vertex.getUVsBuffer() != null) ogl.attributeVector2("texCoord", vertex.getUVsBuffer()); //[I-S]LN=58;[I-E]
 //[I-S]LN=59;[I-E]
      for (int j = 0; j < rvert.objectCount(); j++) { //[I-S]LN=60;[I-E]
        RenderableObject rObj = rvert.objectAt(j); //[I-S]LN=61;[I-E]
        if (!rObj.isVisibleByCamera()) continue; //[I-S]LN=62;[I-E]
        if (rObj.getRenderMatrix() != null) ogl.uniformMatrix4("modelMatrix", rObj.getRenderMatrix()); //[I-S]LN=63;[I-E]
        ogl.drawTriangles(vertex.getTrianglesBuffer()); //[I-S]LN=64;[I-E]
      } //[I-S]LN=65;[I-E]
    } //[I-S]LN=66;[I-E]
    ogl.releaseAttributes(); //[I-S]LN=67;[I-E]
    ogl.releaseShader(); //[I-S]LN=68;[I-E]
  } //[I-S]LN=69;[I-E]
} //[I-S]LN=70;[I-E]