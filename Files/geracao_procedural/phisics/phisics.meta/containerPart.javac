package JAVARuntime;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:phisics
class phisics extends Component { //[I-S]LN=0;[I-E]
  private float gravity = 5f; //[I-S]LN=1;[I-E]
  private Vector3 velocity; //[I-S]LN=2;[I-E]
  private float ColliderSize = 1f; //[I-S]LN=3;[I-E]
  private float eixoX, eixoZ; //[I-S]LN=4;[I-E]
 //[I-S]LN=5;[I-E]
public   void start() { //[I-S]LN=6;[I-E]
    velocity = new Vector3(); //[I-S]LN=7;[I-E]
  } //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
public   void repeat() { //[I-S]LN=10;[I-E]
Vector3 pos = myObject.getPosition(); //[I-S]LN=11;[I-E]
    float delta = Time.deltaTime(); //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
    velocity.setY(velocity.getY() + (-gravity * delta)); //[I-S]LN=14;[I-E]
    pos.setY(pos.getY() + velocity.getY() * delta); //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
    float HeightMax = 1.25f, stepSpeed = 5f; //[I-S]LN=17;[I-E]
 //[I-S]LN=18;[I-E]
float blockInic = getBlock(pos.getX(), pos.getZ()); //[I-S]LN=19;[I-E]
float diffX = getBlock(pos.getX() + velocity.getX() * delta, pos.getZ()) - blockInic; //[I-S]LN=20;[I-E]
float diffZ = getBlock(pos.getX(), pos.getZ() + velocity.getZ() * delta) - blockInic; //[I-S]LN=21;[I-E]
    float HeightDistY = blockInic + ColliderSize; //[I-S]LN=22;[I-E]
float diffY = HeightDistY - pos.getY(); //[I-S]LN=23;[I-E]
    float Ybloque = 0; //[I-S]LN=24;[I-E]
 //[I-S]LN=25;[I-E]
    int veloX = 1, veloZ = 1; //[I-S]LN=26;[I-E]
    if (diffX > HeightMax || diffX < -HeightMax) { //[I-S]LN=27;[I-E]
      veloX = 0; //[I-S]LN=28;[I-E]
Ybloque = pos.getY(); //[I-S]LN=29;[I-E]
    }  //[I-S]LN=30;[I-E]
    if (diffZ > HeightMax || diffZ < -HeightMax) { //[I-S]LN=31;[I-E]
      veloZ = 0; //[I-S]LN=32;[I-E]
Ybloque = pos.getY(); //[I-S]LN=33;[I-E]
    } //[I-S]LN=34;[I-E]
    if (veloZ == 0 || veloX == 0) pos.setY(Ybloque); //[I-S]LN=35;[I-E]
    else { //[I-S]LN=36;[I-E]
      if (diffY > 0 && diffY <= HeightMax) { //[I-S]LN=37;[I-E]
        pos.setY(Math.min(pos.getY() + stepSpeed * delta, HeightDistY)); //[I-S]LN=38;[I-E]
        velocity.setY(0); //[I-S]LN=39;[I-E]
} else if (pos.getY() < HeightDistY) { //[I-S]LN=40;[I-E]
        pos.setY(HeightDistY); //[I-S]LN=41;[I-E]
        velocity.setY(0); //[I-S]LN=42;[I-E]
      } //[I-S]LN=43;[I-E]
    } //[I-S]LN=44;[I-E]
    eixoX = veloX; //[I-S]LN=45;[I-E]
    eixoZ = veloZ; //[I-S]LN=46;[I-E]
  } //[I-S]LN=47;[I-E]
 //[I-S]LN=48;[I-E]
  public float moveX() { //[I-S]LN=49;[I-E]
    return eixoX; //[I-S]LN=50;[I-E]
  } //[I-S]LN=51;[I-E]
 //[I-S]LN=52;[I-E]
  public float moveZ() { //[I-S]LN=53;[I-E]
    return eixoZ; //[I-S]LN=54;[I-E]
  } //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
  public float getBlock(float x, float z) { //[I-S]LN=57;[I-E]
    TerreController terreno = getTerreno(x, z); //[I-S]LN=58;[I-E]
    if (terreno == null) return 0f; //[I-S]LN=59;[I-E]
    return terreno.getHeight(x, z); //[I-S]LN=60;[I-E]
  } //[I-S]LN=61;[I-E]
 //[I-S]LN=62;[I-E]
  public TerreController getTerreno(float x, float z) { //[I-S]LN=63;[I-E]
    chunkgen chunck = (chunkgen) myObject.findComponent("chunkgen"); //[I-S]LN=64;[I-E]
    if (chunck == null) return null; //[I-S]LN=65;[I-E]
    int coodX = (int) Math.floor(x / chunck.width); //[I-S]LN=66;[I-E]
    int coodZ = (int) Math.floor(z / chunck.width); //[I-S]LN=67;[I-E]
    long codekey = chunck.CodificKey(coodX, coodZ); //[I-S]LN=68;[I-E]
    SpatialObject ObjChunck = chunck.chunck.get(codekey); //[I-S]LN=69;[I-E]
    if (ObjChunck == null || !ObjChunck.exists()) return null; //[I-S]LN=70;[I-E]
    return (TerreController) ObjChunck.findComponent("TerreController"); //[I-S]LN=71;[I-E]
  } //[I-S]LN=72;[I-E]
} //[I-S]LN=73;[I-E]