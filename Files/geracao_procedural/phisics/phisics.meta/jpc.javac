class phisics extends Component { //[I-S]LN=0;[I-E]
  private float gravity = 5f; //[I-S]LN=1;[I-E]
  private Vector3 velocity; //[I-S]LN=2;[I-E]
  private float ColliderSize = 1f; //[I-S]LN=3;[I-E]
  private float eixoX, eixoZ; //[I-S]LN=4;[I-E]
 //[I-S]LN=5;[I-E]
  void start() { //[I-S]LN=6;[I-E]
    velocity = new Vector3(); //[I-S]LN=7;[I-E]
  } //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
  void repeat() { //[I-S]LN=10;[I-E]
    Vector3 pos = myObject.position; //[I-S]LN=11;[I-E]
    float delta = Time.deltatime(); //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
    velocity.y = velocity.y + (-gravity * delta); //[I-S]LN=14;[I-E]
    pos.y = pos.y + velocity.y * delta; //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
    float HeightMax = 1.5f; //[I-S]LN=17;[I-E]
    float veloDX = velocity.x * delta, veloDZ = velocity.z * delta; //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
    float blockInic = getBlock(pos.x, pos.z); //[I-S]LN=20;[I-E]
    float blockX = getBlock(pos.x, pos.z + veloDZ); //[I-S]LN=21;[I-E]
    float blockZ = getBlock(pos.x + veloDX, pos.z); //[I-S]LN=22;[I-E]
     //[I-S]LN=23;[I-E]
    eixoX = Math.abs(blockZ - blockInic) > HeightMax ? 0 : 1f; //[I-S]LN=24;[I-E]
    eixoZ = Math.abs(blockX - blockInic) > HeightMax ? 0 : 1f; //[I-S]LN=25;[I-E]
     //[I-S]LN=26;[I-E]
    float HeightDistY = blockInic + ColliderSize; //[I-S]LN=27;[I-E]
    float diffY = HeightDistY - pos.y; //[I-S]LN=28;[I-E]
 //[I-S]LN=29;[I-E]
    if (eixoX != 0 && eixoZ != 0) { //[I-S]LN=30;[I-E]
      if (diffY > 0 && diffY <= HeightMax) { //[I-S]LN=31;[I-E]
        float stepSpeed = 5f; //[I-S]LN=32;[I-E]
        pos.y = Math.min(pos.y + stepSpeed * delta, HeightDistY); //[I-S]LN=33;[I-E]
        velocity.y = 0; //[I-S]LN=34;[I-E]
      } else if (pos.y < HeightDistY) { //[I-S]LN=35;[I-E]
        pos.y = HeightDistY; //[I-S]LN=36;[I-E]
        velocity.y = 0; //[I-S]LN=37;[I-E]
      }  //[I-S]LN=38;[I-E]
    } //[I-S]LN=39;[I-E]
  } //[I-S]LN=40;[I-E]
 //[I-S]LN=41;[I-E]
  public float moveX() { //[I-S]LN=42;[I-E]
    return eixoX; //[I-S]LN=43;[I-E]
  } //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
  public float moveZ() { //[I-S]LN=46;[I-E]
    return eixoZ; //[I-S]LN=47;[I-E]
  } //[I-S]LN=48;[I-E]
 //[I-S]LN=49;[I-E]
  public float getBlock(float x, float z) { //[I-S]LN=50;[I-E]
    TerreController terreno = getTerreno(x, z); //[I-S]LN=51;[I-E]
    return (terreno != null) ? terreno.getHeight(x, z) : 0f; //[I-S]LN=52;[I-E]
  } //[I-S]LN=53;[I-E]
 //[I-S]LN=54;[I-E]
  public TerreController getTerreno(float x, float z) { //[I-S]LN=55;[I-E]
    chunkgen chunck = (chunkgen) myObject.findComponent("chunkgen"); //[I-S]LN=56;[I-E]
    if (chunck == null) return null; //[I-S]LN=57;[I-E]
    int coodX = (int) Math.floor(x / chunck.width); //[I-S]LN=58;[I-E]
    int coodZ = (int) Math.floor(z / chunck.width); //[I-S]LN=59;[I-E]
    long codekey = chunck.CodificKey(coodX, coodZ); //[I-S]LN=60;[I-E]
    SpatialObject ObjChunck = chunck.chunck.get(codekey); //[I-S]LN=61;[I-E]
    if (ObjChunck == null || !ObjChunck.exists()) return null; //[I-S]LN=62;[I-E]
    return (TerreController) ObjChunck.findComponent("TerreController"); //[I-S]LN=63;[I-E]
  } //[I-S]LN=64;[I-E]
} //[I-S]LN=65;[I-E]