package JAVARuntime;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:TerreController
class TerreController extends Component { //[I-S]LN=0;[I-E]
  private SpatialObject armLog, Obj, voi; //[I-S]LN=1;[I-E]
  private ModelRenderer TerrModelo; //[I-S]LN=2;[I-E]
  private Vertex TerrVertex; //[I-S]LN=3;[I-E]
  private List<Vector3> TerrVertices = new LinkedList<Vector3>(), TerrNormal = new LinkedList<Vector3>(); //[I-S]LN=4;[I-E]
  private List<Vector2> TerrUV = new LinkedList<Vector2>(); //[I-S]LN=5;[I-E]
  private int[] TerrTriangle; //[I-S]LN=6;[I-E]
  private PerlinNoise perlin = new PerlinNoise(100); //[I-S]LN=7;[I-E]
  private chunkgen tama; //[I-S]LN=8;[I-E]
  private Vector3 mypos; //[I-S]LN=9;[I-E]
  private HashMap<Long, Float> HeightMap = new HashMap<Long, Float>(); //[I-S]LN=10;[I-E]
  private int[][] block = null; //[I-S]LN=11;[I-E]
  private malha modela = new malha(); //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
public   void start() { //[I-S]LN=14;[I-E]
    if (!myObject.exists()) return; //[I-S]LN=15;[I-E]
    tama = WorldController.findObject("player").findComponent("chunkgen"); //[I-S]LN=16;[I-E]
    armLog = WorldController.findObject("log"); //[I-S]LN=17;[I-E]
    TerrModelo = myObject.findComponent("modelrenderer"); //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
    reload(); //[I-S]LN=20;[I-E]
  } //[I-S]LN=21;[I-E]
 //[I-S]LN=22;[I-E]
  private void myposblock() { //[I-S]LN=23;[I-E]
mypos = myObject.getPosition(); //[I-S]LN=24;[I-E]
  } //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
  public void reload() { //[I-S]LN=27;[I-E]
    new AsyncTask( //[I-S]LN=28;[I-E]
        new AsyncRunnable() { //[I-S]LN=29;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=30;[I-E]
            TerrVertex = new Vertex(); //[I-S]LN=31;[I-E]
            myposblock(); //[I-S]LN=32;[I-E]
            MatrizChunck(); //[I-S]LN=33;[I-E]
            HeightMap.clear(); //[I-S]LN=34;[I-E]
            TerrVertices.clear(); //[I-S]LN=35;[I-E]
            TerrNormal.clear(); //[I-S]LN=36;[I-E]
            TerrUV.clear(); //[I-S]LN=37;[I-E]
            return null; //[I-S]LN=38;[I-E]
          } //[I-S]LN=39;[I-E]
 //[I-S]LN=40;[I-E]
          public void onEngine(Object result) { //[I-S]LN=41;[I-E]
            WaterCriate(); //[I-S]LN=42;[I-E]
            generat(); //[I-S]LN=43;[I-E]
            if (Obj != null || Obj.exists()) { //[I-S]LN=44;[I-E]
              Water gera = Obj.findComponent("Water"); //[I-S]LN=45;[I-E]
              gera.WaterGera(); //[I-S]LN=46;[I-E]
            } //[I-S]LN=47;[I-E]
          } //[I-S]LN=48;[I-E]
        }); //[I-S]LN=49;[I-E]
  }  //[I-S]LN=50;[I-E]
 //[I-S]LN=51;[I-E]
  private void MatrizChunck() { //[I-S]LN=52;[I-E]
    block = new int[tama.width + 1][tama.width + 1]; //[I-S]LN=53;[I-E]
    for (int z = 0; z <= tama.width; z++) { //[I-S]LN=54;[I-E]
      for (int x = 0; x <= tama.width; x++) { //[I-S]LN=55;[I-E]
        float y = modela.perlinnoises(tama, myObject, x, z); //[I-S]LN=56;[I-E]
if (y + mypos.getY() >= tama.waterlevel - 2 && y + mypos.getY() <= 2 + tama.waterlevel) block[z][x] = 1; //[I-S]LN=57;[I-E]
else if (y + mypos.getY() >= tama.waterlevel - 8 && y + mypos.getY() <= tama.waterlevel - 2) block[z][x] = 4; //[I-S]LN=58;[I-E]
else if (y + mypos.getY() <= tama.waterlevel - 8) block[z][x] = 5; //[I-S]LN=59;[I-E]
        else block[z][x] = 3; //[I-S]LN=60;[I-E]
      } //[I-S]LN=61;[I-E]
    } //[I-S]LN=62;[I-E]
  } //[I-S]LN=63;[I-E]
 //[I-S]LN=64;[I-E]
  private void generat() { //[I-S]LN=65;[I-E]
    TerrTriangle = new int[tama.width * tama.width * 6]; //[I-S]LN=66;[I-E]
    for (int z = 0; z <= tama.width; z++) { //[I-S]LN=67;[I-E]
      for (int x = 0; x <= tama.width; x++) { //[I-S]LN=68;[I-E]
        float y = modela.perlinnoises(tama, myObject, x, z); //[I-S]LN=69;[I-E]
long codekey = CodificKey((int) (x + mypos.getX()), (int) (z + mypos.getZ())); //[I-S]LN=70;[I-E]
HeightMap.put(codekey, y + mypos.getY()); //[I-S]LN=71;[I-E]
        topFace(x, y, z, block[z][x]); //[I-S]LN=72;[I-E]
        generationlog(x, y, z); //[I-S]LN=73;[I-E]
      } //[I-S]LN=74;[I-E]
    } //[I-S]LN=75;[I-E]
    modela.triangulo(tama.width, TerrTriangle); //[I-S]LN=76;[I-E]
    TerrVertex = modela.meshup(false, TerrModelo, tama.TerrMate, TerrTriangle, TerrVertices, TerrNormal, TerrUV); //[I-S]LN=77;[I-E]
  } //[I-S]LN=78;[I-E]
 //[I-S]LN=79;[I-E]
  private void topFace(float x, float y, float z, int typeblock) { //[I-S]LN=80;[I-E]
    if (typeblock < 0) return; //[I-S]LN=81;[I-E]
    TerrVertices.add(new Vector3(x, y, z)); //[I-S]LN=82;[I-E]
    TerrNormal.add(new Vector3(0, 1, 0)); //[I-S]LN=83;[I-E]
    Vector2 uv = mapuv(typeblock); //[I-S]LN=84;[I-E]
TerrUV.add(new Vector2(uv.getX() / 2, uv.getY() / 2)); //[I-S]LN=85;[I-E]
  } //[I-S]LN=86;[I-E]
 //[I-S]LN=87;[I-E]
  private Vector2 mapuv(int type) { //[I-S]LN=88;[I-E]
    int t = 4; //[I-S]LN=89;[I-E]
    float tilasize = 1f / t; //[I-S]LN=90;[I-E]
    int tx = type % t; //[I-S]LN=91;[I-E]
    int tz = type / t; //[I-S]LN=92;[I-E]
    tz = (int) tilasize - 1 - tz; //[I-S]LN=93;[I-E]
    float u = tx * tilasize, v = tz * tilasize; //[I-S]LN=94;[I-E]
    return new Vector2(u, v); //[I-S]LN=95;[I-E]
  } //[I-S]LN=96;[I-E]
 //[I-S]LN=97;[I-E]
  public void WaterCriate() { //[I-S]LN=98;[I-E]
    Obj = new SpatialObject("Water"); //[I-S]LN=99;[I-E]
    Obj.setParent(myObject); //[I-S]LN=100;[I-E]
    Obj.setStatic(true); //[I-S]LN=101;[I-E]
    Obj.addComponent(new ModelRenderer()); //[I-S]LN=102;[I-E]
    Obj.addComponent(new Water()); //[I-S]LN=103;[I-E]
  } //[I-S]LN=104;[I-E]
 //[I-S]LN=105;[I-E]
  private void generationlog(float x, float y, float z) { //[I-S]LN=106;[I-E]
float worldx = x + mypos.getX(); //[I-S]LN=107;[I-E]
float worldz = z + mypos.getZ(); //[I-S]LN=108;[I-E]
int chunkX = (int) myObject.getGlobalPosition().getX(); //[I-S]LN=109;[I-E]
int chunkZ = (int) myObject.getGlobalPosition().getZ(); //[I-S]LN=110;[I-E]
    if (worldx < chunkX || worldx >= chunkX + tama.width || worldx < chunkZ || worldz >= chunkZ + tama.width) return; //[I-S]LN=111;[I-E]
    int space = 4; //[I-S]LN=112;[I-E]
    if (((int) worldx % space != 0) || ((int) worldz % space != 0)) return; //[I-S]LN=113;[I-E]
    float addspaw = perlin.noise(worldx + tama.seed, worldz + tama.seed); //[I-S]LN=114;[I-E]
    addspaw -= perlin.noise(worldx * 50f + tama.seed, worldz * 50f + tama.seed); //[I-S]LN=115;[I-E]
    if (addspaw >= tama.valuelog && y > tama.waterlevel + tama.heightscale) { //[I-S]LN=116;[I-E]
      int quemspaw = Random.range(0, tama.trees.size() - 1); //[I-S]LN=117;[I-E]
Vector3 positobj = new Vector3(worldx, y + mypos.getY(), worldz).sub(myObject.getGlobalPosition()); //[I-S]LN=118;[I-E]
      SpatialObject log = myObject.instantiate(tama.trees.get((int) quemspaw), positobj); //[I-S]LN=119;[I-E]
      log.setParent(myObject); //[I-S]LN=120;[I-E]
    } //[I-S]LN=121;[I-E]
  } //[I-S]LN=122;[I-E]
 //[I-S]LN=123;[I-E]
  public float getHeight(float x, float z) { //[I-S]LN=124;[I-E]
    long codeKey = CodificKey((int) Math.floor(x), (int) Math.floor(z)); //[I-S]LN=125;[I-E]
    return HeightMap.getOrDefault(codeKey, 0f); //[I-S]LN=126;[I-E]
  } //[I-S]LN=127;[I-E]
 //[I-S]LN=128;[I-E]
  public long CodificKey(int x, int z) { //[I-S]LN=129;[I-E]
    return (((long) x) << 32) | (z & 0xFFFFFFFFL); //[I-S]LN=130;[I-E]
  } //[I-S]LN=131;[I-E]
} //[I-S]LN=132;[I-E]