class TerreController extends Component { //[I-S]LN=0;[I-E]
  private ModelRenderer TerrModelo; //[I-S]LN=1;[I-E]
  private Vertex TerrVertex; //[I-S]LN=2;[I-E]
  private Vector3Buffer TerrVertices = null, TerrNormal = null; //[I-S]LN=3;[I-E]
  private IntBuffer TerrTriangles = null; //[I-S]LN=4;[I-E]
  private Vector2Buffer TerrUVs = null; //[I-S]LN=5;[I-E]
  private chunkgen tama; //[I-S]LN=6;[I-E]
  private Vector3 mypos; //[I-S]LN=7;[I-E]
  private HashMap<Long, Float> HeightMap = new HashMap<Long, Float>(); //[I-S]LN=8;[I-E]
  private OH2LevelIntArray block = null; //[I-S]LN=9;[I-E]
  private OH2LevelFloatArray heigth = null; //[I-S]LN=10;[I-E]
  private malha modela = new malha(); //[I-S]LN=11;[I-E]
  // private Collider c; //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
  void start() { //[I-S]LN=14;[I-E]
    if (!myObject.exists()) return; //[I-S]LN=15;[I-E]
    tama = WorldController.findObject("player").findComponent("chunkgen"); //[I-S]LN=16;[I-E]
    TerrModelo = myObject.findComponent("modelrenderer"); //[I-S]LN=17;[I-E]
    // c = myObject.findComponent("collider"); //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
    reload(); //[I-S]LN=20;[I-E]
  } //[I-S]LN=21;[I-E]
 //[I-S]LN=22;[I-E]
  private void myposblock() { //[I-S]LN=23;[I-E]
    mypos = myObject.position; //[I-S]LN=24;[I-E]
  } //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
  public void reload() { //[I-S]LN=27;[I-E]
    new AsyncTask( //[I-S]LN=28;[I-E]
        new AsyncRunnable() { //[I-S]LN=29;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=30;[I-E]
            TerrVertex = new Vertex(); //[I-S]LN=31;[I-E]
            myposblock(); //[I-S]LN=32;[I-E]
            MatrizChunck(); //[I-S]LN=33;[I-E]
            createBuffer(); //[I-S]LN=34;[I-E]
            HeightMap.clear(); //[I-S]LN=35;[I-E]
            return null; //[I-S]LN=36;[I-E]
          } //[I-S]LN=37;[I-E]
 //[I-S]LN=38;[I-E]
          public void onEngine(Object result) { //[I-S]LN=39;[I-E]
            generat(); //[I-S]LN=40;[I-E]
          } //[I-S]LN=41;[I-E]
        }); //[I-S]LN=42;[I-E]
  } //[I-S]LN=43;[I-E]
 //[I-S]LN=44;[I-E]
  private void MatrizChunck() { //[I-S]LN=45;[I-E]
    int W = tama.width; //[I-S]LN=46;[I-E]
    block = new OH2LevelIntArray(W + 1, W + 1); //[I-S]LN=47;[I-E]
    heigth = new OH2LevelFloatArray(W + 1, W + 1); //[I-S]LN=48;[I-E]
    for (int z = 0; z <= W; z++) { //[I-S]LN=49;[I-E]
      for (int x = 0; x <= W; x++) { //[I-S]LN=50;[I-E]
        float yLocal = modela.perlinnoises(tama, myObject, x, z); //[I-S]LN=51;[I-E]
        float yWorld = yLocal + mypos.y; //[I-S]LN=52;[I-E]
        heigth.set(z, x, yLocal); //[I-S]LN=53;[I-E]
        if (yWorld >= tama.waterlevel - 2 && yWorld <= 2 + tama.waterlevel) block.set(z, x, 0); //[I-S]LN=54;[I-E]
        else if (yWorld >= tama.waterlevel - 15 && yWorld <= tama.waterlevel - 2) block.set(z, x, 12); //[I-S]LN=55;[I-E]
        else if (yWorld <= tama.waterlevel - 15) block.set(z, x, 7); //[I-S]LN=56;[I-E]
        else block.set(z, x, 1); //[I-S]LN=57;[I-E]
      } //[I-S]LN=58;[I-E]
    } //[I-S]LN=59;[I-E]
  } //[I-S]LN=60;[I-E]
 //[I-S]LN=61;[I-E]
  private void createBuffer() { //[I-S]LN=62;[I-E]
    chunkSimul data = new chunkSimul(); //[I-S]LN=63;[I-E]
    boolean offon = false; //[I-S]LN=64;[I-E]
    data.generat(tama.width, block, heigth, modela); //[I-S]LN=65;[I-E]
    TerrVertices = BufferUtils.createVector3Buffer(data.VertecesCount); //[I-S]LN=66;[I-E]
    TerrNormal = BufferUtils.createVector3Buffer(data.NormalCount); //[I-S]LN=67;[I-E]
    TerrTriangles = BufferUtils.createIntBuffer(data.TrianCount); //[I-S]LN=68;[I-E]
    TerrUVs = BufferUtils.createVector2Buffer(data.UvMapCount); //[I-S]LN=69;[I-E]
    if (!offon) return; //[I-S]LN=70;[I-E]
    TerrVertices.setVboEnabled(true); //[I-S]LN=71;[I-E]
    TerrNormal.setVboEnabled(true); //[I-S]LN=72;[I-E]
    TerrUVs.setVboEnabled(true); //[I-S]LN=73;[I-E]
  } //[I-S]LN=74;[I-E]
 //[I-S]LN=75;[I-E]
  /* private void generat() { //[I-S]LN=76;[I-E]
    int W = tama.width; //[I-S]LN=77;[I-E]
    int para = 0; //[I-S]LN=78;[I-E]
    for (int z = 0; z <= W; z++) { //[I-S]LN=79;[I-E]
      for (int x = 0; x <= W; x++) { //[I-S]LN=80;[I-E]
        float y = heigth.get(z, x); //[I-S]LN=81;[I-E]
        int matriz = block.get(z, x); //[I-S]LN=82;[I-E]
        if (matriz < 0) continue; //[I-S]LN=83;[I-E]
        long codekey = CodificKey((int) (x + mypos.x), (int) (z + mypos.z)); //[I-S]LN=84;[I-E]
        HeightMap.put(codekey, y + mypos.y); //[I-S]LN=85;[I-E]
        topFace(x, y, z, matriz); //[I-S]LN=86;[I-E]
        modela.generationlog(tama, mypos, myObject, x, y, z); //[I-S]LN=87;[I-E]
        if (matriz != 1) para = 1; //[I-S]LN=88;[I-E]
      } //[I-S]LN=89;[I-E]
    } //[I-S]LN=90;[I-E]
    if (para == 1) WaterCriate(); //[I-S]LN=91;[I-E]
 //[I-S]LN=92;[I-E]
    modela.trianguloN(W, TerrTriangles); //[I-S]LN=93;[I-E]
    int[] TrianConvert = new int[TerrTriangles.position()]; //[I-S]LN=94;[I-E]
    TerrTriangles.rewind(); //[I-S]LN=95;[I-E]
    TerrTriangles.get(TrianConvert); //[I-S]LN=96;[I-E]
    TerrVertex = modela.meshupN(false, TerrModelo, tama.TerrMate, TrianConvert, TerrVertices, TerrNormal, TerrUVs); //[I-S]LN=97;[I-E]
  } */ //[I-S]LN=98;[I-E]
 //[I-S]LN=99;[I-E]
  private void generat() { //[I-S]LN=100;[I-E]
    int W = tama.width; //[I-S]LN=101;[I-E]
    int para = 0; //[I-S]LN=102;[I-E]
    for (int z = 0; z <= W ; z++) { //[I-S]LN=103;[I-E]
      for (int x = 0; x <= W; x++) { //[I-S]LN=104;[I-E]
        float y = heigth.get(z, x); //[I-S]LN=105;[I-E]
        int matriz = block.get(z, x); //[I-S]LN=106;[I-E]
        if (matriz < 0) continue; //[I-S]LN=107;[I-E]
        long codekey = CodificKey((int) (x + mypos.x), (int) (z + mypos.z)); //[I-S]LN=108;[I-E]
        HeightMap.put(codekey, y + mypos.y); //[I-S]LN=109;[I-E]
        topFace(x, y, z, matriz); //[I-S]LN=110;[I-E]
        modela.generationlog(tama, mypos, myObject, x, y, z); //[I-S]LN=111;[I-E]
        if (matriz != 1) para = 1; //[I-S]LN=112;[I-E]
      }  //[I-S]LN=113;[I-E]
    } //[I-S]LN=114;[I-E]
    if (para == 1) WaterCriate(); //[I-S]LN=115;[I-E]
 //[I-S]LN=116;[I-E]
    modela.trianguloN(W, TerrTriangles); //[I-S]LN=117;[I-E]
    int[] TrianConvert = new int[TerrTriangles.position()]; //[I-S]LN=118;[I-E]
    TerrTriangles.rewind(); //[I-S]LN=119;[I-E]
    TerrTriangles.get(TrianConvert); //[I-S]LN=120;[I-E]
    TerrVertex = modela.meshupN(false, TerrModelo, tama.TerrMate, TrianConvert, TerrVertices, TerrNormal, TerrUVs); //[I-S]LN=121;[I-E]
    // c.setVertex(TerrVertex); //[I-S]LN=122;[I-E]
  } //[I-S]LN=123;[I-E]
 //[I-S]LN=124;[I-E]
  private void topFace(int x, float y, int z, int typeblock) { //[I-S]LN=125;[I-E]
    if (typeblock < 0) return; //[I-S]LN=126;[I-E]
    TerrVertices.put(x, y, z); //[I-S]LN=127;[I-E]
    TerrNormal.put(0, 1, 0); //[I-S]LN=128;[I-E]
    TerrUVs.put(mapuv(typeblock, 0, 0)); //[I-S]LN=129;[I-E]
  } //[I-S]LN=130;[I-E]
 //[I-S]LN=131;[I-E]
  private Vector2 mapuv(int type, int x, int y) { //[I-S]LN=132;[I-E]
    int t = 4; //[I-S]LN=133;[I-E]
    float tilasize = 1f / t; //[I-S]LN=134;[I-E]
    int tx = type % t; //[I-S]LN=135;[I-E]
    int ty = type / t; //[I-S]LN=136;[I-E]
    float u = tx * tilasize + x * tilasize, v = ty * tilasize + y * tilasize; //[I-S]LN=137;[I-E]
    return new Vector2(u, v); //[I-S]LN=138;[I-E]
  } //[I-S]LN=139;[I-E]
 //[I-S]LN=140;[I-E]
  public void WaterCriate() { //[I-S]LN=141;[I-E]
    SpatialObject Obj = new SpatialObject("Water"); //[I-S]LN=142;[I-E]
    Obj.setParent(myObject); //[I-S]LN=143;[I-E]
    Obj.setStatic(true); //[I-S]LN=144;[I-E]
    Obj.addComponent(new ModelRenderer()); //[I-S]LN=145;[I-E]
    Obj.addComponent(new Water()); //[I-S]LN=146;[I-E]
    Water gera = null; //[I-S]LN=147;[I-E]
    if (Obj.findComponent("water") != null) gera = Obj.findComponent("Water"); //[I-S]LN=148;[I-E]
    if (gera != null) gera.WaterGera(); //[I-S]LN=149;[I-E]
  } //[I-S]LN=150;[I-E]
 //[I-S]LN=151;[I-E]
  public float getHeight(float x, float z) { //[I-S]LN=152;[I-E]
    long codeKey = CodificKey((int) Math.floor(x), (int) Math.floor(z)); //[I-S]LN=153;[I-E]
    return HeightMap.getOrDefault(codeKey, 0f); //[I-S]LN=154;[I-E]
  } //[I-S]LN=155;[I-E]
 //[I-S]LN=156;[I-E]
  public long CodificKey(int x, int z) { //[I-S]LN=157;[I-E]
    return (((long) x) << 32) | (z & 0xFFFFFFFFL); //[I-S]LN=158;[I-E]
  } //[I-S]LN=159;[I-E]
} //[I-S]LN=160;[I-E]