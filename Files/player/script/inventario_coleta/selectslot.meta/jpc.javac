class selectslot extends Component { //[I-S]LN=0;[I-E]
  private List<SpatialObject> objslot = new ArrayList<SpatialObject>(); //[I-S]LN=1;[I-E]
  private List<Key> keys = new ArrayList<Key>(); //[I-S]LN=2;[I-E]
  private SUIImage[] slot = new SUIImage[30]; //[I-S]LN=3;[I-E]
  private SUIText name; //[I-S]LN=4;[I-E]
  private SpatialObject paineldados, player; //[I-S]LN=5;[I-E]
  private int select = -1, trocaslot = -1; //[I-S]LN=6;[I-E]
  private invertore invent; //[I-S]LN=7;[I-E]
  private float clicktime = 0; //[I-S]LN=8;[I-E]
  private int contclick = 0; //[I-S]LN=9;[I-E]
  private SpatialObject Object; //[I-S]LN=10;[I-E]
  private onoffinvent OpenExit; //[I-S]LN=11;[I-E]
  private Color White, Black, Transparent, BlueWhite; //[I-S]LN=12;[I-E]
  public ObjectFile drops; //[I-S]LN=13;[I-E]
  private removeItem removedor; //[I-S]LN=14;[I-E]
   //[I-S]LN=15;[I-E]
  void start() { //[I-S]LN=16;[I-E]
    White = new Color(255, 255, 255); //[I-S]LN=17;[I-E]
    Black = new Color(0, 0, 0); //[I-S]LN=18;[I-E]
    Transparent = new Color(0, 0, 0, 0); //[I-S]LN=19;[I-E]
    BlueWhite = new Color(0, 255, 255); //[I-S]LN=20;[I-E]
     //[I-S]LN=21;[I-E]
    removedor = new removeItem(); //[I-S]LN=22;[I-E]
    player = WorldController.findObject("player"); //[I-S]LN=23;[I-E]
    Object = WorldController.findObject("object"); //[I-S]LN=24;[I-E]
    paineldados = WorldController.findObject("information"); //[I-S]LN=25;[I-E]
    name = paineldados.findComponent("suitext"); //[I-S]LN=26;[I-E]
    invent = myObject.findComponent("invertore"); //[I-S]LN=27;[I-E]
    OpenExit = player.findComponent("onoffinvent"); //[I-S]LN=28;[I-E]
    addslot(); //[I-S]LN=29;[I-E]
    name.setText(""); //[I-S]LN=30;[I-E]
    paineldados.setEnabled(false); //[I-S]LN=31;[I-E]
  } //[I-S]LN=32;[I-E]
 //[I-S]LN=33;[I-E]
  void repeat() { //[I-S]LN=34;[I-E]
    if (clicktime < 5) clicktime += 0.01f; //[I-S]LN=35;[I-E]
    select(); //[I-S]LN=36;[I-E]
    upslot(); //[I-S]LN=37;[I-E]
     //[I-S]LN=38;[I-E]
    int valueDele = removedor.valueDele(); //[I-S]LN=39;[I-E]
    if (Input.isKeyDown("delAll") && select != -1) RemoveSlot(select, invent.slotAlmout[select]); //[I-S]LN=40;[I-E]
    if (Input.isKeyDown("del") && select != -1) RemoveSlot(select,valueDele); //[I-S]LN=41;[I-E]
    if (Input.isKeyDown("invent") || Input.keyboard.isKeyDown("r")) { //[I-S]LN=42;[I-E]
      if (select > 4) select = -1; //[I-S]LN=43;[I-E]
      paineldados.setEnabled(false); //[I-S]LN=44;[I-E]
    } //[I-S]LN=45;[I-E]
    if (!OpenExit.onoff && trocaslot != -1) { //[I-S]LN=46;[I-E]
      paineldados.setEnabled(false); //[I-S]LN=47;[I-E]
      trocaslot = -1; //[I-S]LN=48;[I-E]
      select = -1; //[I-S]LN=49;[I-E]
    } //[I-S]LN=50;[I-E]
  } //[I-S]LN=51;[I-E]
 //[I-S]LN=52;[I-E]
  private void addslot() { //[I-S]LN=53;[I-E]
    for (int i = 0; i < slot.length; i++) { //[I-S]LN=54;[I-E]
      String objpai = i < 5 ? "hotbar" : i < 20 ? "backgroud" : "backgroudCria"; //[I-S]LN=55;[I-E]
      String objcompot = i < 5 ? "slotH" + (i + 1) : i < 20 ? "slot" + (i - 4) : i < 29 ? "slotCria" + (i - 19) : "output"; //[I-S]LN=56;[I-E]
      objslot.add(WorldController.findObject(objpai).findChildObject(objcompot)); //[I-S]LN=57;[I-E]
    } //[I-S]LN=58;[I-E]
    for (int i = 0; i < slot.length; i++) { //[I-S]LN=59;[I-E]
      objslot.get(i).addComponent(new SUIKeyEventListener()); //[I-S]LN=60;[I-E]
      SUIKeyEventListener key = objslot.get(i).findComponent("SUIKeyEventListener"); //[I-S]LN=61;[I-E]
      key.setKeyname(i < 5 ? "slotH" + (i + 1) : i < 29 ? "item" + (i - 4) : "output"); //[I-S]LN=62;[I-E]
      if (slot[i] != null && keys.get(i) != null) continue; //[I-S]LN=63;[I-E]
      slot[i] = objslot.get(i).findComponent("suiimage"); //[I-S]LN=64;[I-E]
      keys.add(Input.getKey(i < 5 ? "slotH" + (i + 1) : i < 29 ? "item" + (i - 4) : "output")); //[I-S]LN=65;[I-E]
    } //[I-S]LN=66;[I-E]
  } //[I-S]LN=67;[I-E]
 //[I-S]LN=68;[I-E]
  private void select() { //[I-S]LN=69;[I-E]
    for (int i = 0; i < slot.length; i++) { //[I-S]LN=70;[I-E]
      if (keys.get(i).isDown()) { //[I-S]LN=71;[I-E]
        UseNoUse(false, select); //[I-S]LN=72;[I-E]
        if (select == i) { //[I-S]LN=73;[I-E]
          select = -1; //[I-S]LN=74;[I-E]
          offonObj("", false, i); //[I-S]LN=75;[I-E]
          modvalue(-1); //[I-S]LN=76;[I-E]
        } else { //[I-S]LN=77;[I-E]
          if (invent.items.get(i) != null && invent.items.get(i).name != null) { //[I-S]LN=78;[I-E]
            item dodasitem = invent.items.get(i); //[I-S]LN=79;[I-E]
            String dados = "\n  name: " + dodasitem.name + "\n  " + dodasitem.typeDC + ": " + dodasitem.value; //[I-S]LN=80;[I-E]
            offonObj(dados, true, i); //[I-S]LN=81;[I-E]
          } else { //[I-S]LN=82;[I-E]
            offonObj("", false, i); //[I-S]LN=83;[I-E]
          } //[I-S]LN=84;[I-E]
          select = i; //[I-S]LN=85;[I-E]
        } //[I-S]LN=86;[I-E]
        break; //[I-S]LN=87;[I-E]
      } //[I-S]LN=88;[I-E]
    } //[I-S]LN=89;[I-E]
  } //[I-S]LN=90;[I-E]
 //[I-S]LN=91;[I-E]
  private void offonObj(String value, boolean onoff, int i) { //[I-S]LN=92;[I-E]
    name.setText(value); //[I-S]LN=93;[I-E]
    if (OpenExit.onoff) paineldados.setEnabled(onoff); //[I-S]LN=94;[I-E]
    boolean hotbar = i >= 0 && i < 5; //[I-S]LN=95;[I-E]
    Object.setEnabled(onoff && hotbar); //[I-S]LN=96;[I-E]
    UseNoUse(onoff, i); //[I-S]LN=97;[I-E]
    ModelRenderer texture = Object.findComponent("modelrenderer"); //[I-S]LN=98;[I-E]
    if (texture == null || invent.items.get(i) == null) return; //[I-S]LN=99;[I-E]
    texture.setModelFile(invent.items.get(i).vertex); //[I-S]LN=100;[I-E]
  } //[I-S]LN=101;[I-E]
 //[I-S]LN=102;[I-E]
  private void UseNoUse(boolean yesNo, int is) { //[I-S]LN=103;[I-E]
    if (is >= 0 && invent.items.get(is) != null && invent.items.get(is).logica != null) { //[I-S]LN=104;[I-E]
      item dodasitem = invent.items.get(is); //[I-S]LN=105;[I-E]
      if (!Input.isKeyDown("output") && yesNo) dodasitem.Usando(); //[I-S]LN=106;[I-E]
      else dodasitem.NoUsando(); //[I-S]LN=107;[I-E]
    } //[I-S]LN=108;[I-E]
  } //[I-S]LN=109;[I-E]
 //[I-S]LN=110;[I-E]
  private void upslot() { //[I-S]LN=111;[I-E]
    for (int i = 0; i < slot.length; i++) { //[I-S]LN=112;[I-E]
      if (keys.get(i).isDown() && OpenExit.onoff) { //[I-S]LN=113;[I-E]
        if (contclick == i && clicktime < 0.1f) { //[I-S]LN=114;[I-E]
          modvalue(trocaslot == i ? -1 : i); //[I-S]LN=115;[I-E]
        } else { //[I-S]LN=116;[I-E]
          contclick = i; //[I-S]LN=117;[I-E]
          clicktime = 0; //[I-S]LN=118;[I-E]
        } //[I-S]LN=119;[I-E]
 //[I-S]LN=120;[I-E]
        if (slot[i] == null) continue; //[I-S]LN=121;[I-E]
        if (trocaslot != -1 && trocaslot != i && trocaslot <= invent.items.size()) { //[I-S]LN=122;[I-E]
          item watslot = invent.items.get(i); //[I-S]LN=123;[I-E]
          item seleslot = invent.items.get(trocaslot); //[I-S]LN=124;[I-E]
          if (watslot != null && seleslot != null && watslot.name != null && watslot.name.equals(seleslot.name)) { //[I-S]LN=125;[I-E]
            int limita = watslot.maxgrup; //[I-S]LN=126;[I-E]
            int space = limita - invent.slotAlmout[i]; //[I-S]LN=127;[I-E]
            // ele so ajunta quando o dois slot tenho quantidade pequena ele uni em um so //[I-S]LN=128;[I-E]
            if (space > 0) { //[I-S]LN=129;[I-E]
              int tranfere = Math.min(invent.slotAlmout[trocaslot], space); //[I-S]LN=130;[I-E]
              invent.slotAlmout[i] += tranfere; //[I-S]LN=131;[I-E]
              invent.slotAlmout[trocaslot] -= tranfere; //[I-S]LN=132;[I-E]
              invent.cont[i].setText(invent.slotAlmout[i] > 0 ? String.valueOf(invent.slotAlmout[i]) : ""); //[I-S]LN=133;[I-E]
              invent.cont[trocaslot].setText(invent.slotAlmout[trocaslot] > 0 ? String.valueOf(invent.slotAlmout[trocaslot]) : ""); //[I-S]LN=134;[I-E]
              if (invent.slotAlmout[trocaslot] <= 0) { //[I-S]LN=135;[I-E]
                invent.items.set(trocaslot, null); //[I-S]LN=136;[I-E]
                invent.spait[trocaslot].setImage(Texture.empty()); //[I-S]LN=137;[I-E]
                invent.spait[trocaslot].setColor(Transparent); //[I-S]LN=138;[I-E]
                invent.cont[trocaslot].setText(""); //[I-S]LN=139;[I-E]
              } //[I-S]LN=140;[I-E]
            } //[I-S]LN=141;[I-E]
          } else { //[I-S]LN=142;[I-E]
            int watvalue = invent.slotAlmout[i]; //[I-S]LN=143;[I-E]
            int muditem = invent.slotAlmout[trocaslot]; //[I-S]LN=144;[I-E]
            invent.slotAlmout[trocaslot] = watvalue; //[I-S]LN=145;[I-E]
            invent.slotAlmout[i] = muditem; //[I-S]LN=146;[I-E]
            tocaslot(i, muditem, seleslot); //[I-S]LN=147;[I-E]
            tocaslot(trocaslot, watvalue, watslot); //[I-S]LN=148;[I-E]
          } //[I-S]LN=149;[I-E]
          select = -1; //[I-S]LN=150;[I-E]
          modvalue(-1); //[I-S]LN=151;[I-E]
        } //[I-S]LN=152;[I-E]
        break; //[I-S]LN=153;[I-E]
      } //[I-S]LN=154;[I-E]
 //[I-S]LN=155;[I-E]
      if (trocaslot == i && invent.items.get(i) != null && invent.items.get(trocaslot) != null) { //[I-S]LN=156;[I-E]
        slot[i].setColor(BlueWhite); //[I-S]LN=157;[I-E]
      } else slot[i].setColor(select == i ? Black : White); //[I-S]LN=158;[I-E]
    } //[I-S]LN=159;[I-E]
  } //[I-S]LN=160;[I-E]
 //[I-S]LN=161;[I-E]
  private void modvalue(int valuetroc) { //[I-S]LN=162;[I-E]
    trocaslot = valuetroc; //[I-S]LN=163;[I-E]
    contclick = -1; //[I-S]LN=164;[I-E]
    clicktime = 0; //[I-S]LN=165;[I-E]
  } //[I-S]LN=166;[I-E]
 //[I-S]LN=167;[I-E]
  private void tocaslot(int i, int whatValue, item seleslot) { //[I-S]LN=168;[I-E]
    // troca os dado //[I-S]LN=169;[I-E]
    invent.items.set(i, seleslot); //[I-S]LN=170;[I-E]
    //// troca ui e color //[I-S]LN=171;[I-E]
    if (invent.spait[i] != null) { //[I-S]LN=172;[I-E]
      invent.spait[i].setImage(seleslot != null && seleslot.ui != null ? seleslot.getSpait() : Texture.empty()); //[I-S]LN=173;[I-E]
      invent.spait[i].setColor(seleslot != null ? White : Transparent); //[I-S]LN=174;[I-E]
    } //[I-S]LN=175;[I-E]
    //// //[I-S]LN=176;[I-E]
    // torca de valores //[I-S]LN=177;[I-E]
    if (invent.cont[whatValue] != null) { //[I-S]LN=178;[I-E]
      invent.cont[i].setText((whatValue) > 0 ? String.valueOf(whatValue) : null); //[I-S]LN=179;[I-E]
    } //[I-S]LN=180;[I-E]
  } //[I-S]LN=181;[I-E]
 //[I-S]LN=182;[I-E]
  private void RemoveSlot(int i, int quant) { //[I-S]LN=183;[I-E]
    if (invent.cont[i] == null || invent.spait[i] == null) return; //[I-S]LN=184;[I-E]
    UseNoUse(false, i); //[I-S]LN=185;[I-E]
    int quantArmaz = invent.slotAlmout[i]; //[I-S]LN=186;[I-E]
    if (quant > quantArmaz) quant = quantArmaz; //[I-S]LN=187;[I-E]
 //[I-S]LN=188;[I-E]
    invent.slotAlmout[i] -= quant; //[I-S]LN=189;[I-E]
    RemoveItem(i, quant); //[I-S]LN=190;[I-E]
    if (invent.slotAlmout[i] > 0) invent.cont[i].setText("" + invent.slotAlmout[i]); //[I-S]LN=191;[I-E]
    else { //[I-S]LN=192;[I-E]
      invent.items.set(i, null); //[I-S]LN=193;[I-E]
      invent.spait[i].setImage(Texture.empty()); //[I-S]LN=194;[I-E]
      invent.spait[i].setColor(Transparent); //[I-S]LN=195;[I-E]
      invent.cont[i].setText(""); //[I-S]LN=196;[I-E]
    } //[I-S]LN=197;[I-E]
    offonObj("", false, i); //[I-S]LN=198;[I-E]
    modvalue(-1); //[I-S]LN=199;[I-E]
  }  //[I-S]LN=200;[I-E]
 //[I-S]LN=201;[I-E]
  private void RemoveItem(int i, int quant) { //[I-S]LN=202;[I-E]
   // removeItem remove = new removeItem(); //[I-S]LN=203;[I-E]
    item rmItems = invent.items.get(i); //[I-S]LN=204;[I-E]
    if (rmItems == null || quant <= 0) return; //[I-S]LN=205;[I-E]
    removedor.CaractItem(rmItems, quant, Object, drops); //[I-S]LN=206;[I-E]
  } //[I-S]LN=207;[I-E]
} //[I-S]LN=208;[I-E]