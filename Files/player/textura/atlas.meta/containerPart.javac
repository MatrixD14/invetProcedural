package JAVARuntime;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:atlas
class atlas extends Component { //[I-S]LN=0;[I-E]
  private Texture ui; //[I-S]LN=1;[I-E]
  public Texture Spait; //[I-S]LN=2;[I-E]
  public int MapSpriteX, MapSpriteY; //[I-S]LN=3;[I-E]
  public int altura = 21, largura = 21; //[I-S]LN=4;[I-E]
  public SUIImage texture; //[I-S]LN=5;[I-E]
 //[I-S]LN=6;[I-E]
public   void start() { //[I-S]LN=7;[I-E]
    texture = myObject.findComponent("suiimage"); //[I-S]LN=8;[I-E]
  }  //[I-S]LN=9;[I-E]
 //[I-S]LN=10;[I-E]
public   void repeat() { //[I-S]LN=11;[I-E]
    texture.setImage(getSpait()); //[I-S]LN=12;[I-E]
  } //[I-S]LN=13;[I-E]
 //[I-S]LN=14;[I-E]
  public Texture getSpait() { //[I-S]LN=15;[I-E]
    if (ui == null) return Texture.empty(); //[I-S]LN=16;[I-E]
    if (Spait == null) Spait = Atlas(); //[I-S]LN=17;[I-E]
    return Spait; //[I-S]LN=18;[I-E]
  } //[I-S]LN=19;[I-E]
 //[I-S]LN=20;[I-E]
  public Texture Atlas() { //[I-S]LN=21;[I-E]
    if (ui == null) return Texture.empty(); //[I-S]LN=22;[I-E]
    Texture mapSprite = new Texture(largura, altura, true); //[I-S]LN=23;[I-E]
    int spaitx = largura * MapSpriteX; //[I-S]LN=24;[I-E]
    int spaity = altura * MapSpriteY; //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
    for (int y = 0; y < altura; y++) { //[I-S]LN=27;[I-E]
      for (int x = 0; x < largura; x++) { //[I-S]LN=28;[I-E]
        Color color = ui.get(x + spaitx, y + spaity); //[I-S]LN=29;[I-E]
        mapSprite.setPixel(x, y, color); //[I-S]LN=30;[I-E]
      } //[I-S]LN=31;[I-E]
    } //[I-S]LN=32;[I-E]
    mapSprite.apply(); //[I-S]LN=33;[I-E]
    return mapSprite; //[I-S]LN=34;[I-E]
  } //[I-S]LN=35;[I-E]
} //[I-S]LN=36;[I-E]